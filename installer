#!/usr/bin/env python3
import argparse
import os
import shutil
import stat
import sys

# put ourselves in the right location for installing
os.chdir(os.path.dirname(__file__))


def install(src, dest, name, dirname=None):
	print("installing {}...".format(name))
	dest_path = os.path.abspath(os.path.expanduser(dest))
	src_path  = os.path.abspath(os.path.expanduser(src ))
	if dirname is not None:
		dir_path = os.path.join(dest_path, dirname)
		ret = shutil.copytree(src_path, dir_path, copy_function=shutil.copy)
	else:
		os.makedirs(dest_path, exist_ok=True)
		ret = shutil.copy(src_path, dest_path)
	print("\t{} installed to {} successfully!".format(name, ret))


def rm(path, name, dirname=None):
	print("removing {}...".format(name))
	full_path = os.path.abspath(os.path.expanduser(path))
	if dirname is not None:
		dir_path = os.path.join(full_path, dirname)
		shutil.rmtree(dir_path)
	else:
		os.remove(full_path)
	print("\tremoved {}.".format(name))


def _install(args):
	if args.which == "all" or args.which == "config":
		install("./config",     args.config_prefix, "config files",      "rgbd")
	if args.which == "all" or args.which == "daemon" or args.which == "share":
		install("./daemon",     args.share_prefix,  "daemon files",      "rgbd/daemon")
	if args.which == "all" or args.which == "animations" or args.which == "share":
		install("./animations", args.share_prefix,  "animation scripts", "rgbd/animations")

	# install lightctl and chmod +x it
	if args.which == "all" or args.which == "bin":
		install("./lightctl", args.bin_dir, "lightctl")
		lctl = os.path.abspath(os.path.expanduser(os.path.join(args.bin_dir, "lightctl")))
		st = os.stat(lctl)
		os.chmod(lctl, st.st_mode | stat.S_IEXEC)

	if args.which == "all" or args.which == "unit_files":
		install("./unitfiles/rgbd.service",   args.unit_file_dir, "rgbd unit files (1/2)")
		install("./unitfiles/rgbd@.service",  args.unit_file_dir, "rgbd unit files (2/2)")
		try:
			install("./unitfiles/dbus.socket",    args.unit_file_dir, "dbus unit files (1/2)")
			install("./unitfiles/dbus.service",   args.unit_file_dir, "dbus unit files (2/2)")
		except Exception as e:
			print("Failed to install dbus unit file(s).")
			print("This is possibly due to dbus unit file(s) already existing, and can probably be ignored.")

	if args.which == "all":
		print("\n\nInstallation complete! You can enable & start rgbd with the following command:")
		print("\n\tsystemctl --user enable --now rgbd")
		print("\nIf you want to use an alternate config file, enable rgbd@[config-file-name].service instead.")


def _uninstall(args):
	if args.which == "all" or args.which == "config":
		rm(args.config_prefix, "config file", "rgbd")
	if args.which == "daemon":
		rm(args.share_prefix, "daemon files", "rgbd/daemon")
	elif args.which == "animations":
		rm(args.share_prefix, "animation scripts", "rgbd/animations")
	elif args.which == "all" or args.which == "share":
		rm(args.share_prefix, "daemon files and animation scripts", "rgbd")
	
	if args.which == "all" or args.which == "bin":
		rm(os.path.join(args.bin_dir, "lightctl"), "lightctl")
	if args.which == "all" or args.which == "unit_files":
		rm(os.path.join(args.unit_file_dir, "rgbd.service" ), "unit files (1/2)")
		rm(os.path.join(args.unit_file_dir, "rgbd@.service"), "unit files (2/2)")
	# we leave dbus services around, since we may not have installed them / other stuff might depend on them.
	print("Uninstallation finished.")


def parse_args():
	parser = argparse.ArgumentParser()

	commands = parser.add_subparsers(dest="command")
	commands.add_parser("install")
	commands.add_parser("update", help="Uninstalls and then reinstalls specified files")
	commands.add_parser("uninstall")
	
	# for dir copies
	parser.add_argument("-c", "--config-prefix", help="The location to install config files to.",       default="~/.config/")
	parser.add_argument("-s", "--share-prefix",  help="The location to install daemon data to.",        default="~/.local/share/")
	# for individual files
	parser.add_argument("-b", "--bin-dir",       help="The location to install executable files to.",   default="~/.local/bin/")
	parser.add_argument("-u", "--unit-file-dir", help="The location to install systemd unit files to.", default="~/.local/share/systemd/user/")
	parser.add_argument("which", choices=["animations", "bin", "config", "daemon", "share", "unit_files", "all"])

	return parser


if __name__ == "__main__":
	parser = parse_args()
	args = parser.parse_args()

	# Only disable this if you __really__ know what you're doing.
	if os.getuid() == 0 or os.geteuid() == 0 or os.getgid() == 0:
		print("You shouldn't be running this as root.")
		parser.print_help()
		sys.exit(-1)

	if args.command == "install":
		_install(args)
	elif args.command == "uninstall":
		_uninstall(args)
	elif args.command == "update":
		_uninstall(args)
		_install(args)
	else:
		parser.print_help()
		sys.exit(1)
